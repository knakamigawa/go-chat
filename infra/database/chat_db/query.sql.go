// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package chat_db

import (
	"context"
	"database/sql"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (
    name, bio, note
) VALUES (
             $1, $2, $3
         )
    RETURNING id, name, bio, note
`

type CreateCharacterParams struct {
	Name string
	Bio  string
	Note sql.NullString
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter, arg.Name, arg.Bio, arg.Note)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Note,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE id = $1
`

func (q *Queries) DeleteCharacter(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCharacter, id)
	return err
}

const findCharacter = `-- name: FindCharacter :one
SELECT id, name, bio, note FROM characters
WHERE name = $1 LIMIT 1
`

func (q *Queries) FindCharacter(ctx context.Context, name string) (Character, error) {
	row := q.db.QueryRow(ctx, findCharacter, name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Note,
	)
	return i, err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, name, bio, note FROM characters
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Note,
	)
	return i, err
}

const listCharacter = `-- name: ListCharacter :many
SELECT id, name, bio, note FROM characters
ORDER BY name
`

func (q *Queries) ListCharacter(ctx context.Context) ([]Character, error) {
	rows, err := q.db.Query(ctx, listCharacter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
